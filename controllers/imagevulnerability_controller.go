/*


Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package controllers

import (
	"context"
	"fmt"

	"github.com/aquasecurity/trivy-enforcer/image"

	"github.com/aquasecurity/trivy/pkg/report"

	"github.com/go-logr/logr"
	"k8s.io/apimachinery/pkg/runtime"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"

	aquasecurityv1alpha1 "github.com/aquasecurity/trivy-enforcer/api/v1alpha1"
	"github.com/aquasecurity/trivy-enforcer/trivy"
)

// ImageVulnerabilityReconciler reconciles a ImageVulnerability object
type ImageVulnerabilityReconciler struct {
	client.Client
	Log    logr.Logger
	Scheme *runtime.Scheme
}

// +kubebuilder:rbac:groups=aquasecurity.github.io,resources=imagevulnerabilities,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=aquasecurity.github.io,resources=imagevulnerabilities/status,verbs=get;update;patch

func (r *ImageVulnerabilityReconciler) Reconcile(req ctrl.Request) (ctrl.Result, error) {
	ctx := context.Background()
	logger := r.Log.WithValues("imagevulnerability", req.NamespacedName)

	logger.Info("Loading ImageVulnerability...")
	var vuln aquasecurityv1alpha1.ImageVulnerability
	if err := r.Get(ctx, req.NamespacedName, &vuln); err != nil {
		return ctrl.Result{}, client.IgnoreNotFound(err)
	}

	results, err := trivy.Scan(vuln.Spec.Image)
	if err != nil {
		return ctrl.Result{}, err
	}
	vuln.Status.Vulnerabilities = convertResult(results)

	ref, err := image.ParseReference(vuln.Spec.Image)
	if err != nil {
		return ctrl.Result{}, err
	}

	if vuln.Labels == nil {
		vuln.Labels = map[string]string{}
	}
	vuln.Labels["registry"] = ref.Registry
	vuln.Labels["namespace"] = ref.Namespace
	vuln.Labels["repository"] = ref.Repository
	vuln.Labels["tag"] = ref.Tag
	vuln.Labels["digest"] = ref.Digest

	if err := r.Update(ctx, &vuln); err != nil {
		return ctrl.Result{}, err
	}

	return ctrl.Result{}, nil
}

func convertResult(results report.Results) []aquasecurityv1alpha1.DetectedVulnerability {
	var vulns []aquasecurityv1alpha1.DetectedVulnerability
	for _, result := range results {
		for _, v := range result.Vulnerabilities {
			vendorCvss := aquasecurityv1alpha1.VendorCVSS{}
			for vendor, cvss := range v.CVSS {
				vendorCvss[vendor] = aquasecurityv1alpha1.CVSS{
					V2Vector: cvss.V2Vector,
					V3Vector: cvss.V3Vector,
					V2Score:  fmt.Sprint(cvss.V2Score),
					V3Score:  fmt.Sprint(cvss.V3Score),
				}
			}

			vulns = append(vulns, aquasecurityv1alpha1.DetectedVulnerability{
				VulnerabilityID:  v.VulnerabilityID,
				PkgName:          v.PkgName,
				InstalledVersion: v.InstalledVersion,
				FixedVersion:     v.FixedVersion,
				SeveritySource:   v.SeveritySource,
				Title:            v.Title,
				Description:      v.Description,
				Severity:         v.Severity,
				CweIDs:           v.CweIDs,
				CVSS:             vendorCvss,
				References:       v.References,
			})
		}
	}
	return vulns
}

func (r *ImageVulnerabilityReconciler) SetupWithManager(mgr ctrl.Manager) error {
	return ctrl.NewControllerManagedBy(mgr).
		For(&aquasecurityv1alpha1.ImageVulnerability{}).
		Complete(r)
}
