apiVersion: v1
kind: Namespace
metadata:
  name: opa
  labels:
    trivy-enforcer.aquasecurity.github.io/webhook: ignore
---
# Grant OPA/kube-mgmt read-only access to resources. This lets kube-mgmt
# replicate resources into OPA so they can be used in policies.
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: opa-viewer
roleRef:
  kind: ClusterRole
  name: view
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: Group
  name: system:serviceaccounts:opa
  apiGroup: rbac.authorization.k8s.io
---
# Define role for OPA/kube-mgmt to update configmaps with policy status.
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: opa
  name: configmap-modifier
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["update", "patch"]
---
# Grant OPA/kube-mgmt role defined above.
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: opa
  name: opa-configmap-modifier
roleRef:
  kind: Role
  name: configmap-modifier
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: Group
  name: system:serviceaccounts:opa
  apiGroup: rbac.authorization.k8s.io
---
kind: Service
apiVersion: v1
metadata:
  name: opa
  namespace: opa
spec:
  selector:
    app: opa
  ports:
  - name: https
    protocol: TCP
    port: 80
    targetPort: 8181
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: opa
  namespace: opa
  name: opa
spec:
  replicas: 1
  selector:
    matchLabels:
      app: opa
  template:
    metadata:
      labels:
        app: opa
      name: opa
    spec:
      containers:
        # WARNING: OPA is NOT running with an authorization policy configured. This
        # means that clients can read and write policies in OPA. If you are
        # deploying OPA in an insecure environment, be sure to configure
        # authentication and authorization on the daemon. See the Security page for
        # details: https://www.openpolicyagent.org/docs/security.html.
        - name: enforcer
          image: openpolicyagent/opa:0.22.0
          args:
            - "run"
            - "--server"
            - "--addr=0.0.0.0:8181"
        - name: kube-mgmt
          image: openpolicyagent/kube-mgmt:0.11
          args:
            - "--replicate-cluster=v1/namespaces"
            - "--replicate=extensions/v1beta1/ingresses"
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: trivy-helper-functions
  namespace: opa
data:
  main: |
    package lib.trivy

    parse_cvss_vector_v3(cvss) = vector {
            s := split(cvss, "/")
            vector := {
                    "AttackVector": attack_vector[s[1]],
                    "AttackComplexity": attack_complexity[s[2]],
                    "PrivilegesRequired": privileges_required[s[3]],
                    "UserInteraction": user_interaction[s[4]],
                    "Scope": scope[s[5]],
                    "Confidentiality": confidentiality[s[6]],
                    "Integrity": integrity[s[7]],
                    "Availability": availability[s[8]],
            }
    }

    attack_vector := {
            "AV:N": "Network",
            "AV:A": "Adjacent",
            "AV:L": "Local",
            "AV:P": "Physical",
    }

    attack_complexity := {
            "AC:L": "Low",
            "AC:H": "High",
    }

    privileges_required := {
            "PR:N": "None",
            "PR:L": "Low",
            "PR:H": "High",
    }

    user_interaction := {
            "UI:N": "None",
            "UI:R": "Required",
    }

    scope := {
            "S:U": "Unchanged",
            "S:C": "Changed",
    }

    confidentiality := {
            "C:N": "None",
            "C:L": "Low",
            "C:H": "High",
    }

    integrity := {
            "I:N": "None",
            "I:L": "Low",
            "I:H": "High",
    }

    availability := {
            "A:N": "None",
            "A:L": "Low",
            "A:H": "High",
    }
